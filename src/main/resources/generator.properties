#\u4EE3\u7801\u751F\u6210\u5668\uFF0C\u914D\u7F6E\u4FE1\u606F
#\u5305\u540D
package=com.ljk.modules.gen
#\u4F5C\u8005
author=ljk
#Email
email=huang把spring-boot项目按照平常的web项目一样发布到tomcat容器下

一、修改打包形式

在pom.xml里设置 <packaging>war</packaging>

二、移除嵌入式tomcat插件

在pom.xml里找到spring-boot-starter-web依赖节点，在其中添加如下代码，

?
1
2
3
4
5
6
7
8
9
10
11
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-web</artifactId>
<!-- 移除嵌入式tomcat插件 -->
<exclusions>
<exclusion>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-tomcat</artifactId>
</exclusion>
</exclusions>
</dependency>
三、添加servlet-api的依赖

下面两种方式都可以，任选其一

?
1
2
3
4
5
6
7
8
9
10
11
12
<dependency>
<groupId>javax.servlet</groupId>
<artifactId>javax.servlet-api</artifactId>
<version>3.1.0</version>
<scope>provided</scope>
</dependency>
<dependency>
<groupId>org.apache.tomcat</groupId>
<artifactId>tomcat-servlet-api</artifactId>
<version>8.0.36</version>
<scope>provided</scope>
</dependency>
四、修改启动类，并重写初始化方法

我们平常用main方法启动的方式，都有一个App的启动类，代码如下：

?
1
2
3
4
5
6
@SpringBootApplication
public class Application {
public static void main(String[] args) {
SpringApplication.run(Application.class, args);
}
}
我们需要类似于web.xml的配置方式来启动spring上下文了，在Application类的同级添加一个SpringBootStartApplication类，其代码如下:

?
1
2
3
4
5
6
7
8
9
10
/**
* 修改启动类，继承 SpringBootServletInitializer 并重写 configure 方法
*/
public class SpringBootStartApplication extends SpringBootServletInitializer {
@Override
protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
// 注意这里要指向原先用main方法执行的Application启动类
return builder.sources(Application.class);
}
}
五、打包部署

在项目根目录下（即包含pom.xml的目录），在命令行里输入：

mvn clean package即可， 等待打包完成，出现[INFO] BUILD SUCCESS即为打包成功。

然后把target目录下的war包放到tomcat的webapps目录下，启动tomcat，即可自动解压部署。

最后在浏览器中输入

http://localhost:[端口号]/[打包项目名]/

发布成功

以上所述是小编给大家介绍的如何把spring boot项目部署到tomcat容器中，希望对大家有所帮助，如果大家有任何疑问请给我留言，小编会及时回复大家的。在此也非常感谢大家对脚本之家网站的支持！

您可能感兴趣的文章:
SpringBoot定时任务两种(Spring Schedule 与 Quartz 整合 )实现方法
Spring Task定时任务的配置和使用详解
java中 spring 定时任务 实现代码
详解spring多线程与定时任务
在Tomcat中部署Web项目的操作方法(必看篇)
spring定时任务执行两次及tomcat部署缓慢问题的解决方法
原文链接：http://blog.csdn.net/javahighness/article/details/52515226xianyuan@gmail.com
#\u8868\u524D\u7F00(\u7C7B\u540D\u4E0D\u4F1A\u5305\u542B\u8868\u524D\u7F00)
tablePrefix=sys_
#baseDao \u8DEF\u5F84
baseDao=com.ljk.modules.common.dao
#utils \u8DEF\u5F84
utils=com.ljk.modules.common.utils
#\u83DC\u5355\u8DEF\u5F84\u6A21\u5757\u914D\u7F6E
module=gen

#\u7C7B\u578B\u8F6C\u6362\uFF0C\u914D\u7F6E\u4FE1\u606F
tinyint=Integer
smallint=Integer
mediumint=Integer
int=Integer
integer=Integer
bigint=Long
float=Float
double=Double
decimal=BigDecimal

char=String
varchar=String
tinytext=String
text=String
mediumtext=String
longtext=String

date=Date
datetime=Date
timestamp=Date

#\u751F\u6210\u6587\u4EF6\u7EDD\u5BF9\u8DEF\u5F84
entity=E:\\IDEAWork\\ljkFrame-base-boot\\src\\main\\java\\com\\ljk\\modules\\gen\\entity
dao=E:\\IDEAWork\\ljkFrame-base-boot\\src\\main\\java\\com\\ljk\\modules\\gen\\dao
mapping=E:\\IDEAWork\\ljkFrame-base-boot\\src\\main\\resources\\mapper\\gen
service=E:\\IDEAWork\\ljkFrame-base-boot\\src\\main\\java\\com\\ljk\\modules\\gen\\service
serviceImpl=E:\\IDEAWork\\ljkFrame-base-boot\\src\\main\\java\\com\\ljk\\modules\\gen\\service\\impl
controller=E:\\IDEAWork\\ljkFrame-base-boot\\src\\main\\java\\com\\ljk\\modules\\gen\\controller
view=E:\\IDEAWork\\ljkFrame-base-boot\\src\\main\\resources\\views\\modules\\gen
js=E:\\IDEAWork\\ljkFrame-base-boot\\src\\main\\resources\\statics\\js\\gen
sql=E:\\IDEAWork\\ljkFrame-base-boot\\sql\\gen
